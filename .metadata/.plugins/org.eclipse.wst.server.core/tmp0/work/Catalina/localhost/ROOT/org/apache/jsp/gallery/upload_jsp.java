/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2020-12-13 14:42:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.gallery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.IOException;
import java.io.File;
import common.FileManager;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.FileRenamePolicy;

public final class upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.FileRenamePolicy");
    _jspx_imports_classes.add("common.FileManager");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*
클라이언트가 전송한 제목 텍스트 및 바이너리 파일을 서버의 특정 디렉토리에 저장해보자
이런 처리를 업로드라고한다
*/
request.setCharacterEncoding("utf-8");//파라미터에 한글이 깨지지 않도록 
//String msg=request.getParameter("msg"); //String 으로 메세지받기 
//이미지는 글씨가 아닌 바이너리 파일이므로, request.getParameter로는 받을 수 없다. 
//따라서 IO, 네트워크 등의 처리를 해야하는데 , 이 자체만드로도 하나의 개발 프로젝트일 것이다. 
// 해결책은? 누군가가 만든 라이브 러리를 이용해서 개발시간을 단축하자 
//현재 우리가 선택한 라이브러리는 cos.jar 라는 Oreilly라는 출판사가 제작한 컴포넌트가 있다. 
String saveDirectory="D:/workspace/javaee_workspace/BoardApp2/WebContent/data";
int maxSize=2*1024*1024; //2M byte
String encoding="utf-8";

// FileRenamePolicy policy: 업로드시, 동일한 파일을 업로드 했을때, 자동으로 이름을 부여한다
// 예) p.jpg 1p.jpg, 2.jpg (파일명은 개발자가 주도하여 명명하므로, policy를 굳이 이용할 필요없다.)

try{
	MultipartRequest multi = new MultipartRequest(request,saveDirectory,maxSize,encoding);//업로드가 발생 
	//업로드 컴포넌트를 이용할 경우, 스트링 파라미터도 업로드 컴포넌트를 이용해야한다. 
	String msg= multi.getParameter("msg");
	out.print("님이 전송한 메세지는"+msg);
	//업로드가 완료된후 , 서버의 저장소에 파일이 존재하게 된 후 해야할일 
	//파일명을 개발자가 정한 규칙으로 변경해야한다. 
	long time = System.currentTimeMillis();
	//구한시간에 확장자를 붙이면 최종적으로 
	out.print(time);
	//방금 업로드한 파일명 알아맞추기(업로드 컴포넌트가 알고있다.)
	 String ori=multi.getOriginalFileName("photo");
	out.print("당신이 업로드한 원래 파일명은"+ori);
	String ext =FileManager.getExtend(ori);
	String filename=time+"."+ext;
	//조작한 이름으로 파일명을 바꿔야한다. 
	//결국 파일을 다루어야 하므로 jacaSE의 File 클래스를 이ㅛㅇㅇ하면 된다. 
	//File 클래스의 api 문서를 찾아서 파일명을 바꾸는 메서드를 찾아보자 
	File savedFile =multi.getFile("photo");
	savedFile.renameTo(new File(saveDirectory+"/"+filename));//파일명 교체 
	//클라이언트에게 전송할 응답정보를 가진객체, 
	//클라이언트의 브라우저로 하여금 지정한 url로 재접속을 시도하게 만든다. 
	out.print(filename+"업로드완료");
}catch(IOException e){
	e.printStackTrace();//콘솔로그에 에러출력
	out.print("업로드 용량이 너무 큽니다");
}


      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
