/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2020-12-13 12:11:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.qna;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.model.QnA;
import board.model.QnADAO;
import board.model.Notice;
import board.model.NoticeDAO;
import java.sql.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/footer.jsp", Long.valueOf(1606970342000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("board.model.Notice");
    _jspx_imports_classes.add("board.model.NoticeDAO");
    _jspx_imports_classes.add("board.model.QnADAO");
    _jspx_imports_classes.add("board.model.QnA");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String qna_id = request.getParameter("qna_id");
	QnADAO qnaDAO = new QnADAO();
	QnA qna = qnaDAO.select(Integer.parseInt(qna_id));

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("body {font-family: Arial, Helvetica, sans-serif;}\r\n");
      out.write("* {box-sizing: border-box;}\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  padding: 12px;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  margin-top: 6px;\r\n");
      out.write("  margin-bottom: 16px;\r\n");
      out.write("  resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("input[type=button] {\r\n");
      out.write("  background-color: #4CAF50;\r\n");
      out.write("  color: white;\r\n");
      out.write("  padding: 12px 20px;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("  background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write(".container {\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  background-color: #f2f2f2;\r\n");
      out.write("  padding: 20px;\r\n");
      out.write("}\r\n");
      out.write("textarea{\r\n");
      out.write("\tbackground-color:yellow;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.ckeditor.com/4.15.1/standard/ckeditor.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("/*\r\n");
      out.write("GET : Http 프로토콜에서 헤더 정보에 데이터를 실어 나른다..아무래도 헤더이다 보니, 전송가능한 양이 미미하다..\r\n");
      out.write("\t\t 현실비유) 편지봉투에 데이터 노출하여 보내는 꼴임..\r\n");
      out.write("POST : Http프로토콜에서 바디영역에 데이터를 실어 나른다. 몸체이다 보니 전송량에 한계가 없다..\r\n");
      out.write("         현실비유) 편지지에 데이터를 숨겨 보내는 꼴임..\r\n");
      out.write("*/\r\n");
      out.write("$(function(){\r\n");
      out.write("\tCKEDITOR.replace(\"subject\");\r\n");
      out.write("\t$($(\"input[type='button']\")[0]).click(function(){ //목록으로\r\n");
      out.write("\t\tlocation.href=\"/qna/list.jsp\";\r\n");
      out.write("\t});\r\n");
      out.write("\t$($(\"input[type='button']\")[1]).click(function(){//수정요청\r\n");
      out.write("\t\tif(confirm(\"수정하시겠어요?\")){\r\n");
      out.write("\t\t\t$(\"form\").attr({\r\n");
      out.write("\t\t\t\tmethod:\"post\",\r\n");
      out.write("\t\t\t\taction:\"/qna/edit.jsp\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(\"form\").submit(); //전송행위!!!\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t$($(\"input[type='button']\")[2]).click(function(){//삭제요청\r\n");
      out.write("\t\tif(confirm(\"삭제하시겠습니까?\")){\r\n");
      out.write("\t\t\t$(\"form\").attr({\r\n");
      out.write("\t\t\t\tmethod:\"post\",\r\n");
      out.write("\t\t\t\taction:\"/qna/delete.jsp\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(\"form\").submit(); //전송행위!!!\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t$($(\"input[type='button']\")[3]).click(function(){//답변달기\r\n");
      out.write("\t\t\t$(\"form\").attr({\r\n");
      out.write("\t\t\t\tmethod:\"post\",\r\n");
      out.write("\t\t\t\taction:\"/qna/reply_form.jsp\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(\"form\").submit(); //전송행위!!!\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <form>\r\n");
      out.write("\t<input type=\"hidden\" name=\"qna_id\" value=\"");
      out.print(qna.getQna_id());
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"team\" value=\"");
      out.print(qna.getTeam());
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"rank\" value=\"");
      out.print(qna.getRank());
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"depth\" value=\"");
      out.print(qna.getDepth());
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("    <label for=\"fname\">First Name</label>\r\n");
      out.write("    <input type=\"text\" id=\"fname\" name=\"author\" value=\"");
      out.print(qna.getWriter());
      out.write("\" >\r\n");
      out.write("\r\n");
      out.write("    <label for=\"lname\">title</label>\r\n");
      out.write("    <input type=\"text\" id=\"lname\" name=\"title\" value=\"");
      out.print(qna.getTitle());
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\t<label for=\"subject\">Content</label>\r\n");
      out.write("    <textarea id=\"subjact\" name=\"content\" placeholder=\"Write something..\" style=\"height:200px\">");
      out.print(qna.getContent());
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("    <input type=\"button\" value=\"목록으로\">\r\n");
      out.write("\t<input type=\"button\" value=\"수정하기\">\r\n");
      out.write("\t<input type=\"button\" value=\"삭제하기\">\r\n");
      out.write("\t<input type=\"button\" value=\"답변달기\">\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("<div style=\"text-align:center\">\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("Copyright All reserved java Net board\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
