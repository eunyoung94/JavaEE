/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2020-12-13 15:34:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.imageboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import common.FileManager;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import board.model.ImageBoardDAO;
import board.model.ImageBoard;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



//앞으로 재사용성이 높은 jsp 코드를 이 파일에 메서드로 모아놓겠다
public String getMsgBack(String msg){ //욕하고, 이전페이지 보여주는것 
	StringBuilder sb = new StringBuilder();
	sb.append("<script>");
	sb.append("alert('"+msg+"');");
	sb.append("history.back();");
	sb.append("</script>");
	return sb.toString();
}
///board/detail.jsp?notice_id="+notice_id+" 매개변수로 빼야함..
public String getMsgURL(String msg ,String url){//욕하고, 원하는 페이지 요청 
	StringBuilder sb = new StringBuilder();
	sb.append("<script>");
	sb.append("alert('"+msg+"');");
	sb.append("location.href='"+url+"';");
	sb.append("</script>");
	return sb.toString();
}

String saveDir = "D:/workspace/javaee_workspace/BoardApp2/WebContent/data";//받은 데이터를 저장할 곳 !
	int maxSize = 3 * 1024 * 1024;//3m byte
	ImageBoardDAO dao = new ImageBoardDAO();
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/lib.jsp", Long.valueOf(1606970342000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("board.model.ImageBoard");
    _jspx_imports_classes.add("common.FileManager");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("board.model.ImageBoardDAO");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

//실습했던 예제보다 기능을 더 추가해서 db에 넣어줄수 있게 dao를 이용해보자 
//업로드 컴포넌트에 대한 설정을 하기 위해서 FileItemFactory객체를 이용해보자 
DiskFileItemFactory itemFactory = new DiskFileItemFactory();
itemFactory.setRepository(new File(saveDir)); //Repository:저장소, 저장소 경로를 설정해준다.
itemFactory.setSizeThreshold(maxSize);//sizeThreshold -->사이즈 문지방을 넘지말자 
itemFactory.setDefaultCharset("utf-8");

ServletFileUpload upload= new ServletFileUpload(itemFactory);
//업로드된 정보를 분석해보자 
request.setCharacterEncoding("utf-8");
List<FileItem> items=upload.parseRequest(request);//업로드된 정보를 분석하자 
//,각 컴포넌트들을 Fileitem 단위로 쪼개자 
ImageBoard board=new ImageBoard();//empty상태에서 vo를 생성

for(FileItem item:items){ //List에 담긴 items의 길이만큼 반복해보자 
	if(item.isFormField()){ //isFormField는 폼필드 항목인지 검사 --> 폼필드 항목이 맞으면 true값, item이 파라미터면(텍스트파일)! 
		if(item.getFieldName().equals("author")){//필드명이 author이면
			board.setAuthor(item.getString());//보드 vo에 새롭게 넣어주자
		}else if(item.getFieldName().equals("title")){ //필드명이 title이면
			board.setTitle(item.getString());
		}else if(item.getFieldName().equals("content")){
			board.setContent(item.getString());
		}

	}else{//textfield가 아니라면 업로드하자!
		String newName=System.currentTimeMillis()+"."+FileManager.getExtend(item.getName());
		//아이템에 저장되어 있는 파일의 이름을 반환하여서 filemanager에 있는 getExtend의 메서드에 넣어줘서 조져주자! 리턴값 ('.'이후의 path==확장자명)을 받아와야지
		String destFile=saveDir+"/"+newName;
		File file = new File(destFile);
		item.write(file);//물리적 저장시점 
		out.print("업로드완료");
		board.setFilename(newName);//vo에 파일명값을 담자
	}
}
//반복문을 지나친 이 시점에는 VO에 데이터가 이미 채워진 상태일것이다. 
int result=dao.insert(board);//이 시점에서는 채워진 VO를 원한다 
if(result==0){
	out.print(getMsgBack("등록실패"));
}else{
	out.print(getMsgURL("등록성공", "/imageboard/list.jsp"));
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
