package common.db;
/*커넥션 풀 사용을 보다 편리하게 처리해야 DAO들에서 고생을 안한다.*/

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.activation.DataSource;
import javax.naming.InitialContext;
import javax.naming.NamingException;

public class PoolManager {
	InitialContext context;//JNDI검색을 담당하는 객체 
	DataSource ds;//커넥션풀 
	
	public PoolManager() {
		try {
			context=new InitialContext(); //검색 객체생성
			ds=(DataSource)context.lookup("java:com/env/jdbc/myoracle"); //찾기성공 and 풀반환
			
		} catch (NamingException e) {
			e.printStackTrace();
		}	
	}
	
	//커넥션이 필요한 자에게Connection을 반환해주는 매서드
	public Connection getConnection() {
		Connection con = null;
		try {
			con=ds.getConnection();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return con;
	}
	public void release(Connection con) {
		if(con!=null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
	}
	
	public void release(Connection con,PreparedStatement pstmt) {
		if(con!=null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
		if(pstmt!=null) {
			try {
				pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
	}
	public void release(Connection con,PreparedStatement pstmt,ResultSet rs) {
		if(con!=null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
		if(pstmt!=null) {
			try {
				pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
		if(rs!=null) {
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}			
		}
	}
	
}
